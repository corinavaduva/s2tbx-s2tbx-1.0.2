#############################################################################
# This is the main configuration file for the ESA Sentinel-3 Toolbox.
# All properties described here can also be passed to the VM as system
# properties using the standard Java
#   -D<property>=<value>
# syntax. In addition, it is possible to use macros of the form
#   ${<property>}
# within a value. Macros will expand to the value of the referred (system)
# property.
#############################################################################

# The application display name.
s2tbx.application.name = S-2 Toolbox

# The S2TBX version number as it will appear in the GUI's main frame title and about box
# The value is usually set by the installer.
s2tbx.version = ${compiler:version.major}.${compiler:version.minor}

# The S2TBX home directory. Used only if
# (1) this configuration file has been specified by the system property 's2tbx.config' or
# (2) the system property 's2tbx.home' has not been specified before.
# With other words, this setting will not overwrite an existing 's2tbx.home' property.
# Has no default value, must be given as system property if not specified here.
#s2tbx.home = .

# The library path to be searched for common JARs. Can comprise multiple paths.
# Multiple paths must be separated using ';' (Windows) or ':' (Unix)
# Default value is '${s2tbx.home}/lib'.
# s2tbx.libDirs = ${s2tbx.home}/lib

# The directory to be searched for modules.
# Default value is '${s2tbx.home}/modules'.
# s2tbx.modules = ${s2tbx.home}/modules

# The ID of the application to launch.
# Has no default value, must be given as system property if not specified here.
s2tbx.app = S2tbxMain

# Output log to the console?
# Default is 'false'.
s2tbx.consoleLog = true

# The log level, must be one of
# OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL.
# Default is 'OFF'.
s2tbx.logLevel = INFO

# Outputs extra debugging information for Ceres launcher and runtime
# Default value is 'false'.
# s2tbx.debug = true

# The application's project home page
s2tbx.homepage.url = http://sentinel.esa.int/

# The application's remote version file.
# Must contain a string of the form "VERSION <version-number>".
# Defaults to "${s2tbx.homepage.url}software/version.txt".
s2tbx.remoteVersion.url = http://www.senbox.net/s2tbx/version.txt

# The URL of the remote module repository.
# Has no default value, but value can be adjusted in VISAT's preferences.
s2tbx.repository.url = http://www.senbox.net/s2tbx/repo/v1.0/

# The default page to be opened (by VISAT) if no internal information page regarding
# data sources was found. Usually this page resides as a resource in
# /doc/help/general/BeamDataSources.html located in the module [beam-help]
s2tbx.datasources.url = http://www.senbox.net/s2tbx/doc/help/general/BeamDataSources.html
# The path to the image for the splash screen's.
# If none is given the application will start without displaying
# a splash screen.
s2tbx.splash.image = ${s2tbx.home}/bin/s2tbx-splash.png

# The splash screen's progress bar area given as <x>,<y>,<width>,<height>
# Default value is '0,<splash.height>-9,<splash.width>,5'.
s2tbx.splash.progressBar.area = 0,404,594,6

# The splash screen's progress bar color given as <R>,<G>,<B>[,<A]
# Default value is '0,255,0' (green).
s2tbx.splash.progressBar.color = 0,162,198,130

# Weather or not the splash screen shall show a task label.
# Default value is 'false'.
s2tbx.splash.taskLabel.enabled = false

# The font of the task label of the splash screen.
# Default value is 'Verdana,ITALIC,10'.
#s2tbx.splash.taskLabel.font = Verdana,ITALIC,10

# The colour of the task label of the splash screen given as <R>,<G>,<B>[,<A].
# Default value is '255,255,255' (white).
s2tbx.splash.taskLabel.color = 0,0,0,170

# The position of the task label of the splash screen given as <x>,<y>.
# Default value is '<splash.progressBar.area.x>,<splash.progressBar.area.y>+<splash.progressBar.area.height>+10'.
s2tbx.splash.taskLabel.pos = 72,195

# The version string for the splash screen, similar to s2tbx.splash.taskLabel
s2tbx.splash.version.text    = ${s2tbx.version}
s2tbx.splash.version.enabled = true
s2tbx.splash.version.font    = Verdana,PLAIN,22
s2tbx.splash.version.color   = 255,255,255,255
s2tbx.splash.version.pos     = 166,393

# Controls the name of the initial geometry container, which is automatically created if
# the users draws the first geometry in a VISAT session.
# The default value is 'geometry'.
# s2tbx.geometry.initialName = geometry

# Controls caching of display image tiles of intermediate operations from raw raster data
# to the finally displayed RGB image.
# The default value is 'false', meaning that no intermediate tile caching takes place.
# snap.imageManager.enableIntermediateTileCaching = true

# Controls caching of source image tiles generated by EO data readers.
# The default value is 'false', meaning that source tile caching takes place.
# You may want to disable source tile caching if you are low on memory.
# snap.imageManager.disableSourceTileCaching = true

# Specifies an observer for tile computations occurring during processing using the SNAP
# Graph Processing Framework (GPF).
# The value must be a name of a class that extends the abstract
# 'org.esa.beam.framework.gpf.monitor.TileComputationObserver' class (see Java API docs).
#
# SNAP comes with two default implementations. The first is
# 'org.esa.beam.framework.gpf.monitor.TileUsageReportGenerator'
# which generates tile usage reports from template files (Velocity template files, *.vm).
# Please have a look at the example template file '${beam-home}/conf/tile-usage-report.xhtml.vm'.
# It would generate an HTML report named 'tile-usage-report.xhtml' if the template file would be
# placed in the current working directory. The second is
# 'org.esa.beam.framework.gpf.monitor.TileComputationEventLogger' which immediately outputs
# a log entry once a tile has been computed or (even more important) re-computed.
#
# snap.gpf.tileComputationObserver = org.esa.beam.framework.gpf.monitor.TileUsageReportGenerator
# snap.gpf.tileComputationObserver = org.esa.beam.framework.gpf.monitor.TileComputationEventLogger

# Controls caching of tiles of graph processing framework (GPF) operators.
# The default value is 'false', meaning that GPF operator tiles are always cached.
# snap.gpf.disableTileCache = true

# Controls the tile size that is used for the images created when reading raster data from product files.
# 1. If only tileHeight is provided, tileWidth will equal number of swath pixels.
# 2. If only tileWidth is provided, tileHeight will be number of scan lines.
# 3. If neither tileWidth nor tileHeight is provided, a suitable tile size will be computed.
# The special value '*' means, that full scene width (height) will be used.
# snap.reader.tileWidth = *
# snap.reader.tileHeight = 64

# Controls whether a PixelGeoCoding is attached to MERIS FRG/FSG products (e.g. created with AMORGOS),
# if an Envisat (N1) data file is opened.
# The default value is 'false', meaning that a Tie-point geo-coding is used instead.
# snap.envisat.usePixelGeoCoding = true

# Controls whether the latitude and longitude data for PixelGeoCoding is read into memory completely
# or only tile by tile when required. The default value is 'true'. Setting this value to 'false' will increase
# the memory required.
# snap.pixelGeoCoding.useTiling = false

# Sets the maximum number of parallel threads to be used for multi-threading,
# e.g. in order to compute image tiles.
# Defaults to the number of CPU cores available.
# snap.parallelism = 2

# Enables or disables the 'established' pixel geo-coding (disabled by default)
# snap.useAlternatePixelGeoCoding = true

# When a NetCDF data file is opened, the values of one-dimensional variables that
# cannot be interpreted as images by SNAP are interpreted as metadata. This can
# cause memory issues, which can be avoided by setting this property to a number >= 0.
# Setting this property to -1 means that all values are read.
# The default value is '100'
snap.netcdf.metadataElementLimit = 100

# If set to true, allows Ceres graphical layers to output extra debugging information, e.g.
# printing out rendering times and drawing image tile bounds.
# snap.renderer.debug = true
